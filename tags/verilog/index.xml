<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verilog on Josef Spjut</title>
    <link>http://josef.spjut.me/tags/verilog/</link>
    <description>Recent content in Verilog on Josef Spjut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Josef Spjut</copyright>
    <lastBuildDate>Thu, 03 Oct 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://josef.spjut.me/tags/verilog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FSM vs. English</title>
      <link>http://josef.spjut.me/teaching/2013/10/03/fsm-vs-english/</link>
      <pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/teaching/2013/10/03/fsm-vs-english/</guid>
      <description>Yesterday, I managed to put together the in-class demo I discussed previously. In this post I&amp;rsquo;d like to give a brief explanation of what I showed and how it demonstrates the proper use of SystemVerilog to describe a finite state machine (FSM).
What I saw many students doing in their 3rd lab, was to use an English language description of the behavior they wanted that they translated directly to behavioral SystemVerilog.</description>
    </item>
    
    <item>
      <title>Interactive Lecture</title>
      <link>http://josef.spjut.me/teaching/2013/10/01/interactive-lecture/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/teaching/2013/10/01/interactive-lecture/</guid>
      <description>In grading some labs this week, I noticed a trend among my students to create something that was essentially a finite state machine (FSM) without actually explicitly making a finite state machine in their verilog description. Typically a FSM has 3 parts, a state register, next state logic, and output logic. The only part of the FSM that should be sequential logic is the state register while the other parts should be purely combinational logic.</description>
    </item>
    
  </channel>
</rss>