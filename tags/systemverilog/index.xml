<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Systemverilog on Josef Spjut</title>
    <link>http://josef.spjut.me/tags/systemverilog/</link>
    <description>Recent content in Systemverilog on Josef Spjut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Josef Spjut</copyright>
    <lastBuildDate>Thu, 12 Sep 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://josef.spjut.me/tags/systemverilog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Two Weeks In</title>
      <link>http://josef.spjut.me/teaching/2013/09/12/two-weeks-in/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/teaching/2013/09/12/two-weeks-in/</guid>
      <description>In my embedded systems class, I decided it would be helpful to start with a review of SystemVerilog to hopefully keep the students from falling into the common pitfalls that come with using hardware description languages to describe hardware. Some important topics I touched on include the &amp;ldquo;proper&amp;rdquo; way to describe a Finite State Machine using SystemVerilog. As a part of that, I made sure to point out the kinds of things that you can do in SystemVerilog to accidentally describe sequential logic when you actually intended for the circuit to be combinational.</description>
    </item>
    
  </channel>
</rss>