<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Josef Spjut</title>
    <link>http://josef.spjut.me/tags/blog/</link>
    <description>Recent content in Blog on Josef Spjut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Josef Spjut</copyright>
    <lastBuildDate>Thu, 06 Jul 2017 09:49:57 -0400</lastBuildDate>
    <atom:link href="/tags/blog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo Notes</title>
      <link>http://josef.spjut.me/post/2017/hugo-notes/</link>
      <pubDate>Thu, 06 Jul 2017 09:49:57 -0400</pubDate>
      
      <guid>http://josef.spjut.me/post/2017/hugo-notes/</guid>
      <description>&lt;p&gt;I recently undertook the effort of moving my website from jekyll using jekyll-bootstrap to Hugo and I wanted to record some notes from my efforts. In particular I want to collect a set of useful links that helped me in making the switch.&lt;/p&gt;

&lt;p&gt;For what it&amp;rsquo;s worth, I greatly prefer Hugo now that I&amp;rsquo;ve gotten used to it, though there wasn&amp;rsquo;t too much broken about Jekyll.&lt;/p&gt;

&lt;p&gt;The most useful thing for developing my site was when I found the &lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;academic theme&lt;/a&gt;. It turns out that in Hugo, themes contain a lot of the functionality of a site, and they make it easy to add on functionality either by modifying the theme, or your site in particular. The academic theme is widely used so there a good &lt;a href=&#34;https://sourcethemes.com/academic/post/getting-started/&#34; target=&#34;_blank&#34;&gt;reference page&lt;/a&gt; to help you get started.&lt;/p&gt;

&lt;p&gt;The creator of the academic theme also has a &lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34;&gt;good tutorial&lt;/a&gt; on his blog for how to set up a new hugo site from scratch.&lt;/p&gt;

&lt;p&gt;I ended up testing a lot of my design on a separate repository so I could test out pushing to github sites. It turns out that github user pages need to push to the &lt;code&gt;master&lt;/code&gt; branch in order to publish to the web, so my original script to push to a &lt;code&gt;gh-pages&lt;/code&gt; branch had to be modified. It seems to be working as of July 26, 2017, but there are probably a ton of bugs remaining. If you happen to find any bugs, please leave a comment or sent me a message on twitter to let me know and I&amp;rsquo;ll fix it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Submitting my first article to arXiv</title>
      <link>http://josef.spjut.me/research/2014/12/02/submitting-my-first-article-to-arxiv/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/research/2014/12/02/submitting-my-first-article-to-arxiv/</guid>
      <description>&lt;p&gt;Today I submitted a technical report done by my students over the last academic year.
It took a while to get the write-up to the level of quality that I felt good about submitting it,
but now that it&amp;rsquo;s there, I figured I should push it out.
I used &lt;a href=&#34;http://arxiv.org/&#34; target=&#34;_blank&#34;&gt;arXiv&lt;/a&gt; to post it since they make it easy to publish a technical report
while not preventing you from submitting the work to another venue such as a conference or journal
at a later date.
I used Latex to write the paper, and in preparing the submission, there were a
couple modifications I had to make to get it accepted by the system.&lt;/p&gt;

&lt;p&gt;First, I had to include a line that says &lt;code&gt;\pdfoutput=1&lt;/code&gt; somewhere
in the first 5 lines of the main tex file I submitted.&lt;/p&gt;

&lt;p&gt;Second, I had to include the &lt;code&gt;main.bbl&lt;/code&gt; file that was generated
locally as part of my build process.
It appears that they don&amp;rsquo;t actually need the &lt;code&gt;.bib&lt;/code&gt; file and
only care about the &lt;code&gt;.bbl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, my particular document used a style sheet called &lt;code&gt;jpaper.cls&lt;/code&gt; that
had a strange error with how it includes the &lt;code&gt;hyperref&lt;/code&gt; package.
The relevant lines that I had to comment out are below (comments added):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;% Link and URL formatting.
%\iftoggle{jp@hyperref}{
%  \RequirePackage{hyperref}
%  \hypersetup{
%    unicode=true,
%    pdfstartview={FitH},
%    colorlinks=true,
%    %citecolor=black,
%    %filecolor=black,
%    %linkcolor=black,
%    %urlcolor=black
% }}{}
%\RequirePackage{url}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I had an issue with figures I included that I think had to do with how
I uploaded all of the source material.
Since I submitted each file separately instead of part of a compressed folder,
the graphics I was trying to include were now a part of the root directory instead
of being present in the &lt;code&gt;graphics&lt;/code&gt; subdirectory that I use locally.
Luckily, there was a straightforward fix that I think I&amp;rsquo;ll include in my future
documents by default because it&amp;rsquo;s much cleaner than what I&amp;rsquo;ve done traditionally.
In the main &lt;code&gt;.tex&lt;/code&gt; file include a line like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;% graphics path
\graphicspath{ {./graphics/} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, instead of including the relative path to everything in the graphics path,
just include the graphics directly as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\begin{figure}
\centering
\includegraphics[width=\columnwidth]{PairedCaches}
\caption{Partly shared instruction caches}
\label{fig:paired}
\end{figure}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jetson TK1 First Steps</title>
      <link>http://josef.spjut.me/programming/2014/05/20/jetson-tk1-first-steps/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/programming/2014/05/20/jetson-tk1-first-steps/</guid>
      <description>&lt;p&gt;I recently received my &lt;a href=&#34;https://developer.nvidia.com/jetson-tk1&#34; target=&#34;_blank&#34;&gt;Jetson TK1 Development
Board&lt;/a&gt;, which I&amp;rsquo;m evaluating
for potential use in an embedded systems course next Spring.
This board is attractive to me because it has a high-end quad core ARM
A15 processor as well as a high-end mobile GPU with support for the
latest OpenGL and CUDA development environments.
This post is going to serve as a way for me to record the things
needed to set up the device in the first place, and hopefully more
posts will follow as I manage to develop some examples on the board
that will hopefully turn into lab assignments for the class.&lt;/p&gt;

&lt;p&gt;The first thing you notice when you plug in the board and turn it on,
is that it boots to an OS without any setup because the built-in flash
has linux on it from the factory.
However, there is no x11 support out of the box.
Well that&amp;rsquo;s not quite true&amp;hellip;
The support is available, but you must &lt;a href=&#34;http://developer.download.nvidia.com/embedded/jetson/TK1/README.txt&#34; target=&#34;_blank&#34;&gt;run a script to install the
driver&lt;/a&gt;.
The instructions from the README are copied and inline here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This README file lists instructions on how to install the NVIDIA
Linux driver binary release on your target located in:
${HOME}/NVIDIA-INSTALLER

Step 1)
Change directories into the NVIDIA installation directory:
    cd ${HOME}/NVIDIA-INSTALLER

Step 2)
Run the installer script to extract and install the Linux driver
binary release:
    sudo ./installer.sh

Step 3)
Reboot the system to have the graphical desktop UI come up.

NOTES:
- The installer.sh should only be run once.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More to come&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Busy Semester</title>
      <link>http://josef.spjut.me/teaching/2014/04/16/a-busy-semester/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/teaching/2014/04/16/a-busy-semester/</guid>
      <description>&lt;p&gt;This semester has been extremely exciting. In particular, E85 has been
updated from MIPS to use the ARM v7 instructions set.
This has been a good experience for me despite some difficulties and a
few moments of intensity where I wasn&amp;rsquo;t sure things would come
together in time.
In doing this, I&amp;rsquo;ve come to learn a lot about the ARM ISA, and I&amp;rsquo;ve
decided I like it a lot.
In particular, I think it strikes a reasonably good balance between
RISC and CISC instructions where there are a couple nice addressing
modes for stack manipulation that aren&amp;rsquo;t quite RISC, but are close
enough.&lt;/p&gt;

&lt;p&gt;An example of the niceness can be seen by the following code for stack
manipulation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-arm&#34;&gt;ADD SP, SP, #-12
STR R0, [SP, #8]
STR R1, [SP, #4]
STR R2, [SP, #0]
...
LDR R0, [SP, #8]
LDR R1, [SP, #4]
LDR R2, [SP, #0]
ADD SP, SP, #12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code can be effectively replaced by the following which updates
the stack pointer as the values are written or read from the stack:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-arm&#34;&gt;STR R0, [SP, #-4]!
STR R1, [SP, #-4]!
STR R2, [SP, #-4]!
...
LDR R2, [SP], #4
LDR R1, [SP], #4
LDR R0, [SP], #4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MIPS did not have the option to manipulate the stack pointer while
changing it from a single instruction.
I think this additional understanding will be useful for many of the
students in the class in their future careers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyll Bootstrap: rake post</title>
      <link>http://josef.spjut.me/website/2013/09/18/jekyll-bootstrap-rake-post/</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/website/2013/09/18/jekyll-bootstrap-rake-post/</guid>
      <description>&lt;p&gt;I recently discovered a new feature that comes with Jekyll bootstrap,
but I&amp;rsquo;m unsure whether it is only in JB, or if it comes by default
with Jekyll.
There is a Rakefile (which is sort of like a Makefile, but written in
Ruby) that includes a few nice functions.
The one I discovered most recently allows you to create a new blog
post complete with the YAML frontmatter and the proper file name for
Jekyll to do the right thing with.
The usage is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Usage: rake post title=&amp;quot;A Title&amp;quot; [date=&amp;quot;2012-02-09&amp;quot;] [tags=[tag1, tag2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you omit all of the optional arguments, then &lt;code&gt;rake post&lt;/code&gt; will
create a new post on today&amp;rsquo;s date titled &amp;ldquo;New Post&amp;rdquo; with the default
values for everything else.
I personally prefer to include a title in my rake command to get the
correct file name from the beginning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Year, New Website</title>
      <link>http://josef.spjut.me/website/2013/09/01/new-year-new-website/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://josef.spjut.me/website/2013/09/01/new-year-new-website/</guid>
      <description>&lt;p&gt;I happened across [jekyll-bootstrap][] the other day, and I decided I
should move my website to &lt;a href=&#34;http://github.io&#34; target=&#34;_blank&#34;&gt;github.io&lt;/a&gt; after seeing
what &lt;a href=&#34;http://jekyllrb.com&#34; target=&#34;_blank&#34;&gt;jekyll&lt;/a&gt; can do.
Among my favorite features are the ability to use markdown for web
pages, which allows a reasonably good citation syntax for adding links
to my co-authors.
As an example, the following is the syntax for one paper along with
the citations to my co-authors:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. [Daniel Kopta][dk], **[Josef Spjut][jbs]**, [Erik Brunvand][elb];
**Grid-Based Ray Tracing for a Parallel Computing Architecture**,
*High Performance Graphics (HPG&#39;09)*, New Orleans, August 1-3, 2009.
   [dk]: http://www.cs.utah.edu/~dkopta
   [ks]: http://www.cs.utah.edu/~kshkurko
   [jbs]: http://www3.hmc.edu/~jspjut
   [elb]: http://www.cs.utah.edu/~elb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The beauty of this is I now only need to update one spot if anyone
changes their affiliation or home page. Awesome.&lt;/p&gt;

&lt;p&gt;Conveniently, jekyll-bootstrap also gives all the niceness of &lt;a href=&#34;http://getbootstrap.com&#34; target=&#34;_blank&#34;&gt;twitter
bootstrap&lt;/a&gt;, such as the decent template you now see (I hope to improve
it to my liking more in the future).
The main reason I chose the hooligan template is that it came with
easy-to-use social media integration that you can see in the top right
if you are looking at this webpage on a non-mobile browser.&lt;/p&gt;

&lt;p&gt;As an added benefit, I can now easily post blog entries, and hook into
Disqus for comments. Nice.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
